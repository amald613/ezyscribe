<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="43" passed="34" failed="9" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-07-30T22:35:13 IST" name="EzyScribe Login Suite" finished-at="2025-07-30T22:39:27 IST" duration-ms="254176">
    <groups>
    </groups>
    <test started-at="2025-07-30T22:35:13 IST" name="LoginTests" finished-at="2025-07-30T22:39:27 IST" duration-ms="254176">
      <class name="tests.ScribeDashboardTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:20 IST" name="setup" finished-at="2025-07-30T22:38:24 IST" duration-ms="4121" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyDarkLightSystemModeSwitch()[pri:1, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:24 IST" name="verifyDarkLightSystemModeSwitch" finished-at="2025-07-30T22:38:29 IST" duration-ms="4350" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDarkLightSystemModeSwitch -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:29 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:38:32 IST" duration-ms="2977" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifyFilterByTaskId()[pri:2, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:32 IST" name="verifyFilterByTaskId" finished-at="2025-07-30T22:38:42 IST" duration-ms="10176" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Filtered task not present expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Filtered task not present expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1590)
at org.testng.Assert.assertTrue(Assert.java:57)
at tests.ScribeDashboardTest.verifyFilterByTaskId(ScribeDashboardTest.java:94)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyFilterByTaskId -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:42 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:38:45 IST" duration-ms="3492" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByTaskIdActuallySorts()[pri:3, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:45 IST" name="verifySortByTaskIdActuallySorts" finished-at="2025-07-30T22:38:46 IST" duration-ms="140" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByTaskIdActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:46 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:38:48 IST" duration-ms="2967" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByPatientInitialsActuallySorts()[pri:4, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:48 IST" name="verifySortByPatientInitialsActuallySorts" finished-at="2025-07-30T22:38:49 IST" duration-ms="126" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByPatientInitialsActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:49 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:38:52 IST" duration-ms="3076" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByStatusActuallySorts()[pri:5, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:52 IST" name="verifySortByStatusActuallySorts" finished-at="2025-07-30T22:38:52 IST" duration-ms="124" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByStatusActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:52 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:38:55 IST" duration-ms="3067" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByPriorityActuallySorts()[pri:6, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:55 IST" name="verifySortByPriorityActuallySorts" finished-at="2025-07-30T22:38:55 IST" duration-ms="161" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByPriorityActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:55 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:38:58 IST" duration-ms="2984" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByUploadDateActuallySorts()[pri:7, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:58 IST" name="verifySortByUploadDateActuallySorts" finished-at="2025-07-30T22:38:58 IST" duration-ms="136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByUploadDateActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:38:58 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:39:01 IST" duration-ms="3009" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByUploadTimeActuallySorts()[pri:8, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:39:01 IST" name="verifySortByUploadTimeActuallySorts" finished-at="2025-07-30T22:39:01 IST" duration-ms="136" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Upload Time column is not sorted.: Lists differ at element [0]: 04:32 PM != 10:38 PM expected [04:32 PM] but found [10:38 PM]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Upload Time column is not sorted.: Lists differ at element [0]: 04:32 PM != 10:38 PM expected [04:32 PM] but found [10:38 PM]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1590)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:1656)
at tests.ScribeDashboardTest.verifySortByUploadTimeActuallySorts(ScribeDashboardTest.java:155)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByUploadTimeActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:39:01 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:39:04 IST" duration-ms="2538" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByAudioDurationActuallySorts()[pri:9, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:39:04 IST" name="verifySortByAudioDurationActuallySorts" finished-at="2025-07-30T22:39:04 IST" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByAudioDurationActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:39:04 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:39:07 IST" duration-ms="3094" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifyFilterByStatusInProgress()[pri:10, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:39:07 IST" name="verifyFilterByStatusInProgress" finished-at="2025-07-30T22:39:13 IST" duration-ms="5610" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Neither rows nor 'No data' message appeared after filtering.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Neither rows nor 'No data' message appeared after filtering.
at pages.ScribeDashboardPage.filterStatusInProgress(ScribeDashboardPage.java:119)
at tests.ScribeDashboardTest.verifyFilterByStatusInProgress(ScribeDashboardTest.java:171)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyFilterByStatusInProgress -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:39:13 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:39:15 IST" duration-ms="2476" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifyFilterByPriorityMedium()[pri:11, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:39:15 IST" name="verifyFilterByPriorityMedium" finished-at="2025-07-30T22:39:21 IST" duration-ms="5545" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Neither rows nor 'No data' message appeared after filtering by Medium priority.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Neither rows nor 'No data' message appeared after filtering by Medium priority.
at pages.ScribeDashboardPage.filterPriorityMedium(ScribeDashboardPage.java:158)
at tests.ScribeDashboardTest.verifyFilterByPriorityMedium(ScribeDashboardTest.java:179)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyFilterByPriorityMedium -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:39:21 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:39:24 IST" duration-ms="3489" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifyViewTaskHidesRow()[pri:12, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:39:24 IST" name="verifyViewTaskHidesRow" finished-at="2025-07-30T22:39:24 IST" duration-ms="244" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyViewTaskHidesRow -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:39:24 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:39:27 IST" duration-ms="2452" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.ScribeDashboardTest@765f05af]" started-at="2025-07-30T22:39:27 IST" name="tearDown" finished-at="2025-07-30T22:39:27 IST" duration-ms="280" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.ScribeDashboardTest -->
      <class name="tests.LoginTests">
        <test-method is-config="true" signature="setupClass()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:13 IST" name="setupClass" finished-at="2025-07-30T22:35:14 IST" duration-ms="913" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupClass -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:14 IST" name="setup" finished-at="2025-07-30T22:35:19 IST" duration-ms="4238" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:19 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:35:21 IST" duration-ms="2331" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC01]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[testprovider@gmail.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[12345678]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[success_doctor]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:21 IST" name="tearDown" finished-at="2025-07-30T22:35:21 IST" duration-ms="143" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:21 IST" name="setup" finished-at="2025-07-30T22:35:24 IST" duration-ms="3270" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:24 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:35:26 IST" duration-ms="1255" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC02]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[wrongemail@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DocPass123]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:26 IST" name="tearDown" finished-at="2025-07-30T22:35:26 IST" duration-ms="123" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:26 IST" name="setup" finished-at="2025-07-30T22:35:29 IST" duration-ms="3217" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:29 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:35:30 IST" duration-ms="1275" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC03]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[doctor@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[wrongpass]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:30 IST" name="tearDown" finished-at="2025-07-30T22:35:30 IST" duration-ms="118" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:30 IST" name="setup" finished-at="2025-07-30T22:35:34 IST" duration-ms="3200" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:34 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:35:35 IST" duration-ms="1222" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC04]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DocPass123]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:35 IST" name="tearDown" finished-at="2025-07-30T22:35:35 IST" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:35 IST" name="setup" finished-at="2025-07-30T22:35:38 IST" duration-ms="3027" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:38 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:35:39 IST" duration-ms="1255" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC05]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[doctor@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:39 IST" name="tearDown" finished-at="2025-07-30T22:35:39 IST" duration-ms="134" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:39 IST" name="setup" finished-at="2025-07-30T22:35:43 IST" duration-ms="3205" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:43 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:35:44 IST" duration-ms="1225" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC06]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:44 IST" name="tearDown" finished-at="2025-07-30T22:35:44 IST" duration-ms="122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:44 IST" name="setup" finished-at="2025-07-30T22:35:47 IST" duration-ms="3045" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:47 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:35:48 IST" duration-ms="1293" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC07]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[doctor@@example]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DocPass123]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:48 IST" name="tearDown" finished-at="2025-07-30T22:35:48 IST" duration-ms="122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:48 IST" name="setup" finished-at="2025-07-30T22:35:52 IST" duration-ms="3211" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:52 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:35:53 IST" duration-ms="1263" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC10]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[special@!#$.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[special123]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:53 IST" name="tearDown" finished-at="2025-07-30T22:35:53 IST" duration-ms="125" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:53 IST" name="setup" finished-at="2025-07-30T22:35:56 IST" duration-ms="3138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:56 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:35:58 IST" duration-ms="1312" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC11]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[verylongemail@exampletoolonglonglongdomain.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DocPass123]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:58 IST" name="tearDown" finished-at="2025-07-30T22:35:58 IST" duration-ms="105" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:35:58 IST" name="setup" finished-at="2025-07-30T22:36:01 IST" duration-ms="3032" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:01 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:36:02 IST" duration-ms="1282" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC12]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[doctor@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[passwordWithVeryLongText1234567890!@#]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:02 IST" name="tearDown" finished-at="2025-07-30T22:36:02 IST" duration-ms="109" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:02 IST" name="setup" finished-at="2025-07-30T22:36:05 IST" duration-ms="3226" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:05 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:36:13 IST" duration-ms="7319" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC15]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[testprovider@gmail.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[12345678]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[success_doctor]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:13 IST" name="tearDown" finished-at="2025-07-30T22:36:13 IST" duration-ms="137" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:13 IST" name="setup" finished-at="2025-07-30T22:36:16 IST" duration-ms="3215" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:16 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:36:18 IST" duration-ms="2281" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC19]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Testprovider@gmail.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[12345678]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[success_doctor]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:18 IST" name="tearDown" finished-at="2025-07-30T22:36:18 IST" duration-ms="140" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:18 IST" name="setup" finished-at="2025-07-30T22:36:21 IST" duration-ms="3036" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:21 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:36:23 IST" duration-ms="1281" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC20]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[doctor@example.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[DOCPASS123]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[error]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:23 IST" name="tearDown" finished-at="2025-07-30T22:36:23 IST" duration-ms="125" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:23 IST" name="setup" finished-at="2025-07-30T22:36:26 IST" duration-ms="3293" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:26 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:36:33 IST" duration-ms="7307" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC23]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[testprovider@gmail.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[12345678]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[success_doctor]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:33 IST" name="tearDown" finished-at="2025-07-30T22:36:34 IST" duration-ms="124" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:34 IST" name="setup" finished-at="2025-07-30T22:36:37 IST" duration-ms="3075" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="loginTest(java.lang.String,java.lang.String,java.lang.String,java.lang.String)[pri:1, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:37 IST" name="loginTest" description="TC01-TC24 - Login test for various valid/invalid credentials" data-provider="loginData" finished-at="2025-07-30T22:36:38 IST" duration-ms="1784" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[TC24]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[testscribe@gmail.com]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[12345678]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[success_scribe]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:38 IST" name="tearDown" finished-at="2025-07-30T22:36:39 IST" duration-ms="127" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:39 IST" name="setup" finished-at="2025-07-30T22:36:42 IST" duration-ms="3030" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="forgotPasswordTest_TC09()[pri:2, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:42 IST" name="forgotPasswordTest_TC09" description="TC09 - Verify &#039;Forgot Password&#039; triggers email alert" finished-at="2025-07-30T22:36:43 IST" duration-ms="1787" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- forgotPasswordTest_TC09 -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:43 IST" name="tearDown" finished-at="2025-07-30T22:36:43 IST" duration-ms="122" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:43 IST" name="setup" finished-at="2025-07-30T22:36:47 IST" duration-ms="3212" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="epicLoginRedirectTest()[pri:3, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:36:47 IST" name="epicLoginRedirectTest" description="TC25 - Verify Epic Login Redirect" finished-at="2025-07-30T22:37:02 IST" duration-ms="15728" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- epicLoginRedirectTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.LoginTests@5c18016b]" started-at="2025-07-30T22:37:02 IST" name="tearDown" finished-at="2025-07-30T22:37:03 IST" duration-ms="132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.LoginTests -->
      <class name="tests.DoctorDashboardTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:03 IST" name="setup" finished-at="2025-07-30T22:37:05 IST" duration-ms="2523" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLanguageToggle()[pri:1, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:05 IST" name="verifyLanguageToggle" finished-at="2025-07-30T22:37:07 IST" duration-ms="1654" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLanguageToggle -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:07 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:37:08 IST" duration-ms="869" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifyDarkLightSystemModeSwitch()[pri:2, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:08 IST" name="verifyDarkLightSystemModeSwitch" finished-at="2025-07-30T22:37:10 IST" duration-ms="2694" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyDarkLightSystemModeSwitch -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:10 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:37:12 IST" duration-ms="1396" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifyFilterByTaskId()[pri:3, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:12 IST" name="verifyFilterByTaskId" finished-at="2025-07-30T22:37:24 IST" duration-ms="12236" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Filtered task not present expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Filtered task not present expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1590)
at org.testng.Assert.assertTrue(Assert.java:57)
at tests.DoctorDashboardTest.verifyFilterByTaskId(DoctorDashboardTest.java:115)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyFilterByTaskId -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:24 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:37:25 IST" duration-ms="1391" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByTaskIdActuallySorts()[pri:4, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:25 IST" name="verifySortByTaskIdActuallySorts" finished-at="2025-07-30T22:37:27 IST" duration-ms="1736" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByTaskIdActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:27 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:37:28 IST" duration-ms="976" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByPatientInitialsActuallySorts()[pri:5, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:28 IST" name="verifySortByPatientInitialsActuallySorts" finished-at="2025-07-30T22:37:30 IST" duration-ms="1731" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByPatientInitialsActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:30 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:37:31 IST" duration-ms="1067" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByStatusActuallySorts()[pri:6, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:31 IST" name="verifySortByStatusActuallySorts" finished-at="2025-07-30T22:37:33 IST" duration-ms="1712" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByStatusActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:33 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:37:33 IST" duration-ms="950" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByPriorityActuallySorts()[pri:7, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:33 IST" name="verifySortByPriorityActuallySorts" finished-at="2025-07-30T22:37:35 IST" duration-ms="1713" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByPriorityActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:35 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:37:36 IST" duration-ms="1029" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByUploadDateActuallySorts()[pri:8, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:36 IST" name="verifySortByUploadDateActuallySorts" finished-at="2025-07-30T22:37:38 IST" duration-ms="1747" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByUploadDateActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:38 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:37:39 IST" duration-ms="941" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByUploadTimeActuallySorts()[pri:9, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:39 IST" name="verifySortByUploadTimeActuallySorts" finished-at="2025-07-30T22:37:41 IST" duration-ms="1710" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Upload Time column is not sorted.: Lists differ at element [0]: 04:32 PM != 09:44 PM expected [04:32 PM] but found [09:44 PM]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Upload Time column is not sorted.: Lists differ at element [0]: 04:32 PM != 09:44 PM expected [04:32 PM] but found [09:44 PM]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1590)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:1656)
at tests.DoctorDashboardTest.verifySortByUploadTimeActuallySorts(DoctorDashboardTest.java:176)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByUploadTimeActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:41 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:37:42 IST" duration-ms="908" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifySortByAudioDurationActuallySorts()[pri:10, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:42 IST" name="verifySortByAudioDurationActuallySorts" finished-at="2025-07-30T22:37:43 IST" duration-ms="1717" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySortByAudioDurationActuallySorts -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:43 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:37:44 IST" duration-ms="1077" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifyFilterByStatusInProgress()[pri:11, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:44 IST" name="verifyFilterByStatusInProgress" finished-at="2025-07-30T22:37:51 IST" duration-ms="7061" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Neither rows nor 'No data' message appeared after filtering.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Neither rows nor 'No data' message appeared after filtering.
at pages.DoctorDashboardPage.filterStatusInProgress(DoctorDashboardPage.java:127)
at tests.DoctorDashboardTest.verifyFilterByStatusInProgress(DoctorDashboardTest.java:192)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyFilterByStatusInProgress -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:51 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:37:53 IST" duration-ms="1412" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifyFilterByPriorityMedium()[pri:12, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:37:53 IST" name="verifyFilterByPriorityMedium" finished-at="2025-07-30T22:38:00 IST" duration-ms="7044" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Neither rows nor 'No data' message appeared after filtering by Medium priority.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Neither rows nor 'No data' message appeared after filtering by Medium priority.
at pages.DoctorDashboardPage.filterPriorityMedium(DoctorDashboardPage.java:166)
at tests.DoctorDashboardTest.verifyFilterByPriorityMedium(DoctorDashboardTest.java:200)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyFilterByPriorityMedium -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:38:00 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:38:01 IST" duration-ms="1353" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifyViewTaskHidesRow()[pri:13, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:38:01 IST" name="verifyViewTaskHidesRow" finished-at="2025-07-30T22:38:03 IST" duration-ms="1838" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyViewTaskHidesRow -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:38:03 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:38:04 IST" duration-ms="864" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method signature="verifyRecordingWorkflow_ReviewAfterRecordAgain()[pri:14, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:38:04 IST" name="verifyRecordingWorkflow_ReviewAfterRecordAgain" finished-at="2025-07-30T22:38:19 IST" duration-ms="14680" status="FAIL">
          <exception class="org.openqa.selenium.TimeoutException">
            <message>
              <![CDATA[Expected condition failed: waiting for invisibility of [[ChromeDriver: chrome on windows (1b293306f5131f57a878ade348525d28)] -> xpath: //div[@role='dialog' and contains(., 'Review Recordings')]] (tried for 10 second(s) with 500 milliseconds interval)
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '21.0.7'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 138.0.7204.168, chrome: {chromedriverVersion: 138.0.7204.183 (e90faf484dd..., userDataDir: C:\Temp\BraveProfile}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:49221}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:49221/devtoo..., se:cdpVersion: 138.0.7204.168, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 1b293306f5131f57a878ade348525d28]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.TimeoutException: Expected condition failed: waiting for invisibility of [[ChromeDriver: chrome on windows (1b293306f5131f57a878ade348525d28)] -> xpath: //div[@role='dialog' and contains(., 'Review Recordings')]] (tried for 10 second(s) with 500 milliseconds interval)
Build info: version: '4.21.0', revision: '79ed462ef4'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '21.0.7'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 138.0.7204.168, chrome: {chromedriverVersion: 138.0.7204.183 (e90faf484dd..., userDataDir: C:\Temp\BraveProfile}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:49221}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:49221/devtoo..., se:cdpVersion: 138.0.7204.168, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 1b293306f5131f57a878ade348525d28
at org.openqa.selenium.support.ui.WebDriverWait.timeoutException(WebDriverWait.java:84)
at org.openqa.selenium.support.ui.FluentWait.until(FluentWait.java:228)
at pages.DoctorDashboardPage.uploadRecordings(DoctorDashboardPage.java:290)
at tests.DoctorDashboardTest.verifyRecordingWorkflow_ReviewAfterRecordAgain(DoctorDashboardTest.java:253)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:141)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:687)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:230)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:995)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:203)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:154)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:134)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:741)
at org.testng.TestRunner.run(TestRunner.java:616)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:421)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:413)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:373)
at org.testng.SuiteRunner.run(SuiteRunner.java:312)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1274)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1208)
at org.testng.TestNG.runSuites(TestNG.java:1112)
at org.testng.TestNG.run(TestNG.java:1079)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:293)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:91)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.TimeoutException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRecordingWorkflow_ReviewAfterRecordAgain -->
        <test-method is-config="true" signature="refreshPageAfterEachTest()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:38:19 IST" name="refreshPageAfterEachTest" finished-at="2025-07-30T22:38:20 IST" duration-ms="1405" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPageAfterEachTest -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.DoctorDashboardTest@463b4ac8]" started-at="2025-07-30T22:38:20 IST" name="tearDown" finished-at="2025-07-30T22:38:20 IST" duration-ms="269" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.DoctorDashboardTest -->
    </test> <!-- LoginTests -->
  </suite> <!-- EzyScribe Login Suite -->
</testng-results>
